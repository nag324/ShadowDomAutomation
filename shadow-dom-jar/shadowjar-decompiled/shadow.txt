package io.github.sukgu;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Method;
import java.util.List;
import java.util.function.Function;
import org.openqa.selenium.ElementNotVisibleException;
import org.openqa.selenium.JavascriptException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.SearchContext;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.CommandExecutor;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.SessionId;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Shadow {
  WebDriver driver;
  
  WebDriverException exception;
  
  WebDriverWait wait;
  
  CommandExecutor executer;
  
  SessionId sessionId;
  
  ChromeDriver chromeDriver;
  
  FirefoxDriver firfoxDriver;
  
  InternetExplorerDriver ieDriver;
  
  RemoteWebDriver remoteWebDriver;
  
  private int implicitWait = 0;
  
  private int explicitWait = 0;
  
  private int pollingTime = 0;
  
  public Shadow(WebDriver driver) {
    if (driver instanceof ChromeDriver) {
      this.sessionId = ((ChromeDriver)driver).getSessionId();
      this.chromeDriver = (ChromeDriver)driver;
    } else if (driver instanceof FirefoxDriver) {
      this.sessionId = ((FirefoxDriver)driver).getSessionId();
      this.firfoxDriver = (FirefoxDriver)driver;
    } else if (driver instanceof InternetExplorerDriver) {
      this.sessionId = ((InternetExplorerDriver)driver).getSessionId();
      this.ieDriver = (InternetExplorerDriver)driver;
    } else if (driver instanceof RemoteWebDriver) {
      this.sessionId = ((RemoteWebDriver)driver).getSessionId();
      this.remoteWebDriver = (RemoteWebDriver)driver;
    } 
    this.driver = driver;
  }
  
  private Object injectShadowExecuter(String javascript) {
    if (this.chromeDriver != null) {
      ChromeDriver chromeDriver = this.chromeDriver;
      waitForPageLoaded();
      return chromeDriver.executeScript(javascript, new Object[0]);
    } 
    if (this.firfoxDriver != null) {
      waitForPageLoaded();
      return this.firfoxDriver.executeScript(javascript, new Object[0]);
    } 
    if (this.ieDriver != null) {
      waitForPageLoaded();
      return this.ieDriver.executeScript(javascript, new Object[0]);
    } 
    if (this.remoteWebDriver != null) {
      RemoteWebDriver remoteWebDriver = this.remoteWebDriver;
      waitForPageLoaded();
      return remoteWebDriver.executeScript(javascript, new Object[0]);
    } 
    return null;
  }
  
  private Object injectShadowExecuter(String javascript, WebElement element) {
    if (this.chromeDriver != null) {
      ChromeDriver chromeDriver = this.chromeDriver;
      waitForPageLoaded();
      return chromeDriver.executeScript(javascript, new Object[] { element });
    } 
    if (this.firfoxDriver != null) {
      waitForPageLoaded();
      return this.firfoxDriver.executeScript(javascript, new Object[] { element });
    } 
    if (this.ieDriver != null) {
      waitForPageLoaded();
      return this.ieDriver.executeScript(javascript, new Object[] { element });
    } 
    if (this.remoteWebDriver != null) {
      RemoteWebDriver remoteWebDriver = this.remoteWebDriver;
      waitForPageLoaded();
      return remoteWebDriver.executeScript(javascript, new Object[] { element });
    } 
    return null;
  }
  
  private Object executerGetObject(String script) {
    String javascript = convertJStoText().toString();
    javascript = javascript + script;
    return injectShadowExecuter(javascript);
  }
  
  private Object executerGetObject(String script, WebElement element) {
    String javascript = convertJStoText().toString();
    javascript = javascript + script;
    return injectShadowExecuter(javascript, element);
  }
  
  private StringBuilder convertJStoText() {
    InputStream in = getClass().getResourceAsStream("/querySelector.js");
    BufferedReader reader = null;
    StringBuilder text = new StringBuilder();
    reader = new BufferedReader(new InputStreamReader(in));
    if (reader != null)
      try {
        while (reader.ready())
          text.append(reader.readLine()); 
      } catch (IOException e) {
        e.printStackTrace();
      }  
    if (reader != null)
      try {
        reader.close();
      } catch (IOException e) {
        e.printStackTrace();
      }  
    return text;
  }
  
  private void fixLocator(SearchContext context, String cssLocator, WebElement element) {
    if (element instanceof org.openqa.selenium.remote.RemoteWebElement)
      try {
        Class[] parameterTypes = { SearchContext.class, String.class, String.class };
        Method m = element.getClass().getDeclaredMethod("setFoundBy", parameterTypes);
        m.setAccessible(true);
        Object[] parameters = { context, "cssSelector", cssLocator };
        m.invoke(element, parameters);
      } catch (Exception exception) {} 
  }
  
  private void waitForPageLoaded() {
    ExpectedCondition<Boolean> expectation = new ExpectedCondition<Boolean>() {
        public Boolean apply(WebDriver driver) {
          return Boolean.valueOf(((JavascriptExecutor)driver).executeScript("return document.readyState", new Object[0]).toString().equals("complete"));
        }
      };
    try {
      Thread.sleep(1000L);
      WebDriverWait wait = new WebDriverWait(this.driver, 30L);
      wait.until((Function)expectation);
    } catch (Throwable throwable) {}
  }
  
  public void setImplicitWait(int seconds) {
    this.implicitWait = seconds;
  }
  
  public void setExplicitWait(int seconds, int pollingTime) throws Exception {
    if (pollingTime > seconds)
      throw new Exception("pollingTime can't be greater than wait time"); 
    this.explicitWait = seconds;
    this.pollingTime = pollingTime;
  }
  
  private boolean isPresent(WebElement element) {
    boolean present = false;
    try {
      present = ((Boolean)executerGetObject("return isVisible(arguments[0]);", element)).booleanValue();
    } catch (JavascriptException javascriptException) {}
    return present;
  }
  
  public WebElement findElement(String cssSelector) {
    WebElement element = null;
    boolean visible = false;
    if (this.implicitWait > 0) {
      try {
        Thread.sleep((this.implicitWait * 1000));
      } catch (InterruptedException interruptedException) {}
      element = (WebElement)executerGetObject("return getObject(\"" + cssSelector + "\");");
      fixLocator((SearchContext)this.driver, cssSelector, element);
      visible = isPresent(element);
    } 
    if (this.explicitWait > 0) {
      element = (WebElement)executerGetObject("return getObject(\"" + cssSelector + "\");");
      fixLocator((SearchContext)this.driver, cssSelector, element);
      visible = isPresent(element);
      for (int i = 0; i < this.explicitWait && !visible;) {
        try {
          Thread.sleep((this.pollingTime * 1000));
          element = (WebElement)executerGetObject("return getObject(\"" + cssSelector + "\");");
          fixLocator((SearchContext)this.driver, cssSelector, element);
          visible = isPresent(element);
          i += this.pollingTime;
        } catch (InterruptedException interruptedException) {}
      } 
    } 
    if (this.explicitWait == 0 && this.implicitWait == 0) {
      element = (WebElement)executerGetObject("return getObject(\"" + cssSelector + "\");");
      fixLocator((SearchContext)this.driver, cssSelector, element);
    } 
    if (!isPresent(element))
      throw new ElementNotVisibleException("Element with CSS " + cssSelector + " is not present on screen"); 
    return element;
  }
  
  public WebElement findElement(WebElement parent, String cssSelector) {
    WebElement element = null;
    boolean visible = false;
    if (this.implicitWait > 0) {
      try {
        Thread.sleep((this.implicitWait * 1000));
      } catch (InterruptedException interruptedException) {}
      element = (WebElement)executerGetObject("return getObject(\"" + cssSelector + "\", arguments[0]);", parent);
      fixLocator((SearchContext)this.driver, cssSelector, element);
      visible = isPresent(element);
    } 
    if (this.explicitWait > 0) {
      element = (WebElement)executerGetObject("return getObject(\"" + cssSelector + "\", arguments[0]);", parent);
      fixLocator((SearchContext)this.driver, cssSelector, element);
      visible = isPresent(element);
      for (int i = 0; i < this.explicitWait && !visible;) {
        try {
          Thread.sleep((this.pollingTime * 1000));
          element = (WebElement)executerGetObject("return getObject(\"" + cssSelector + "\", arguments[0]);", parent);
          fixLocator((SearchContext)this.driver, cssSelector, element);
          visible = isPresent(element);
          i += this.pollingTime;
        } catch (InterruptedException interruptedException) {}
      } 
    } 
    if (this.explicitWait == 0 && this.implicitWait == 0) {
      element = (WebElement)executerGetObject("return getObject(\"" + cssSelector + "\", arguments[0]);", parent);
      fixLocator((SearchContext)this.driver, cssSelector, element);
    } 
    if (!isPresent(element))
      throw new ElementNotVisibleException("Element with CSS " + cssSelector + " is not present on screen"); 
    return element;
  }
  
  public List<WebElement> findElements(String cssSelector) {
    if (this.implicitWait > 0)
      try {
        Thread.sleep((this.implicitWait * 1000));
      } catch (InterruptedException interruptedException) {} 
    List<WebElement> element = null;
    Object object = executerGetObject("return getAllObject(\"" + cssSelector + "\");");
    if (object != null && object instanceof List)
      element = (List<WebElement>)object; 
    for (WebElement webElement : element)
      fixLocator((SearchContext)this.driver, cssSelector, webElement); 
    return element;
  }
  
  public List<WebElement> findElements(WebElement parent, String cssSelector) {
    if (this.implicitWait > 0)
      try {
        Thread.sleep((this.implicitWait * 1000));
      } catch (InterruptedException interruptedException) {} 
    List<WebElement> element = null;
    Object object = executerGetObject("return getAllObject(\"" + cssSelector + "\", arguments[0]);", parent);
    if (object != null && object instanceof List)
      element = (List<WebElement>)object; 
    for (WebElement webElement : element)
      fixLocator((SearchContext)this.driver, cssSelector, webElement); 
    return element;
  }
  
  public WebElement getShadowElement(WebElement parent, String selector) {
    if (this.implicitWait > 0)
      try {
        Thread.sleep((this.implicitWait * 1000));
      } catch (InterruptedException interruptedException) {} 
    WebElement element = null;
    element = (WebElement)executerGetObject("return getShadowElement(arguments[0],\"" + selector + "\");", parent);
    fixLocator((SearchContext)this.driver, selector, element);
    return element;
  }
  
  public List<WebElement> getAllShadowElement(WebElement parent, String selector) {
    if (this.implicitWait > 0)
      try {
        Thread.sleep((this.implicitWait * 1000));
      } catch (InterruptedException interruptedException) {} 
    List<WebElement> elements = null;
    Object object = executerGetObject("return getAllShadowElement(arguments[0],\"" + selector + "\");", parent);
    if (object != null && object instanceof List)
      elements = (List<WebElement>)object; 
    for (WebElement element : elements)
      fixLocator((SearchContext)this.driver, selector, element); 
    return elements;
  }
  
  public WebElement getParentElement(WebElement element) {
    if (this.implicitWait > 0)
      try {
        Thread.sleep((this.implicitWait * 1000));
      } catch (InterruptedException interruptedException) {} 
    return (WebElement)executerGetObject("return getParentElement(arguments[0]);", element);
  }
  
  public List<WebElement> getChildElements(WebElement parent) {
    if (this.implicitWait > 0)
      try {
        Thread.sleep((this.implicitWait * 1000));
      } catch (InterruptedException interruptedException) {} 
    List<WebElement> elements = null;
    Object object = executerGetObject("return getChildElements(arguments[0]);", parent);
    if (object != null && object instanceof List)
      elements = (List<WebElement>)object; 
    return elements;
  }
  
  public List<WebElement> getSiblingElements(WebElement element) {
    if (this.implicitWait > 0)
      try {
        Thread.sleep((this.implicitWait * 1000));
      } catch (InterruptedException interruptedException) {} 
    List<WebElement> elements = null;
    Object object = executerGetObject("return getSiblingElements(arguments[0]);", element);
    if (object != null && object instanceof List)
      elements = (List<WebElement>)object; 
    return elements;
  }
  
  public WebElement getSiblingElement(WebElement element, String selector) {
    if (this.implicitWait > 0)
      try {
        Thread.sleep((this.implicitWait * 1000));
      } catch (InterruptedException interruptedException) {} 
    return (WebElement)executerGetObject("return getSiblingElement(arguments[0],\"" + selector + "\");", element);
  }
  
  public WebElement getNextSiblingElement(WebElement element) {
    return (WebElement)executerGetObject("return getNextSiblingElement(arguments[0]);", element);
  }
  
  public WebElement getPreviousSiblingElement(WebElement element) {
    return (WebElement)executerGetObject("return getPreviousSiblingElement(arguments[0]);", element);
  }
  
  public boolean isVisible(WebElement element) {
    return ((Boolean)executerGetObject("return isVisible(arguments[0]);", element)).booleanValue();
  }
  
  public boolean isChecked(WebElement element) {
    return ((Boolean)executerGetObject("return isChecked(arguments[0]);", element)).booleanValue();
  }
  
  public boolean isDisabled(WebElement element) {
    return ((Boolean)executerGetObject("return isDisabled(arguments[0]);", element)).booleanValue();
  }
  
  public String getAttribute(WebElement element, String attribute) {
    return (String)executerGetObject("return getAttribute(arguments[0],\"" + attribute + "\");", element);
  }
  
  public void selectCheckbox(WebElement parentElement, String label) {
    executerGetObject("return selectCheckbox(\"" + label + "\",arguments[0]);", parentElement);
  }
  
  public void selectCheckbox(String label) {
    executerGetObject("return selectCheckbox(\"" + label + "\");");
  }
  
  public void selectRadio(WebElement parentElement, String label) {
    executerGetObject("return selectRadio(\"" + label + "\",arguments[0]);", parentElement);
  }
  
  public void selectRadio(String label) {
    executerGetObject("return selectRadio(\"" + label + "\");");
  }
  
  public void selectDropdown(WebElement parentElement, String label) {
    executerGetObject("return selectDropdown(\"" + label + "\",arguments[0]);", parentElement);
  }
  
  public void selectDropdown(String label) {
    executerGetObject("return selectDropdown(\"" + label + "\");");
  }
  
  public void scrollTo(WebElement element) {
    executerGetObject("return scrollTo(arguments[0]);", element);
  }
}
